---
name: Release

on:
  schedule:
  - cron: '0 18 * * *'
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  tag:
    name: Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      should-release: ${{ steps.tag.outputs.should-release }}
      clangd: ${{ steps.tag.outputs.clangd }}
      clangd_lin: ${{ steps.tag.outputs.clangd_lin }}
      ahk: ${{ steps.tag.outputs.ahk }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - id: tag
        name: Check version
        shell: bash
        run: |
          should_release=false
          new=$(curl https://github.com/fcying/tools/releases/tag/tools)
          ahk=$(echo $new | grep -Po "(?<=<li>autohotkey2-lsp )\d+\.\d+\.\d+")
          clangd_lin=$(echo $new | grep -Po "(?<=<li>clangd )\d+\.\d+\.\d+")
          clangd=$(curl -sv "https://github.com/clangd/clangd/releases/latest" 2>&1 | grep -P location: | grep -Po "(\d+\.){2}\d+")

          cur_clangd=$(grep -Po "(?<=clangd@)\d+\.\d+\.\d+" packages/clangd/package.yaml)
          cur_clangd_lin=$(grep -Po "(?<=linux_version@)\d+\.\d+\.\d+" packages/clangd/package.yaml)
          cur_ahk=$(grep -Po "(?<=autohotkey2-lsp@)\d+\.\d+\.\d+" packages/autohotkey2/package.yaml)

          tag=$(date "+%Y%m%d")
          if [[ "$clangd" != "$cur_clangd" || "$clangd_lin" != "$cur_clangd_lin" ]]; then
            if [ -n "$(echo $clangd | grep -P '^\d+\.\d+\.\d+$')" ]; then
              should_release=true
              tag="$tag-clangd"
              sed -i "s|clangd@.*|clangd@$clangd|" packages/clangd/package.yaml
              sed -i "s|linux_version@.*|linux_version@$clangd_lin|" packages/clangd/package.yaml
            fi
          fi
          if [ "$clangd" != "$cur_clangd" ]; then
            if [ -n "$(echo $clangd | grep -P '^\d+\.\d+\.\d+$')" ]; then
              should_release=true
              tag="$tag-clangd"
              sed -i "s|clangd@.*|clangd@$clangd|" packages/clangd/package.yaml
            fi
          fi
          if [ "$ahk" != "$cur_ahk" ]; then
            if [ -n "$(echo $ahk | grep -P '^\d+\.\d+\.\d+$')" ]; then
              should_release=true
              tag="$tag-ahk"
              sed -i "s|lsp@.*|lsp@$ahk|" packages/autohotkey2/package.yaml
            fi
          fi

          if [ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]; then
              should_release=true
          elif [ "$GITHUB_EVENT_NAME" == "push" ]; then
              should_release=true
          fi

          echo "clangd=$clangd" >> $GITHUB_OUTPUT
          echo "clangd_lin=$clangd_lin" >> $GITHUB_OUTPUT
          echo "ahk=$ahk" >> $GITHUB_OUTPUT

          if [ -n "$(git diff)" ]; then
            echo "update version"
            should_release=true
            git config --global user.name 'actions[bot]'
            git config --global user.email 'actions[bot]@bot.github.com'
            git add .
            git commit -m "$tag"
            git push origin master
          fi

          printf "tag=%s\nshould-release=%s" $tag $should_release >> "$GITHUB_OUTPUT"

  release:
    needs: [tag]
    if: ${{ needs.tag.outputs.should-release == 'true' }}
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Set up yq
        shell: bash
        run: |
          sudo curl -fL "https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64" -o /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
      - name: Compile
        shell: bash
        run: |
          #checkout not get last version with push in tag
          git pull --depth=2
          yq ea '[.]' -o json packages/*/package.yaml > registry.json
          zip -r registry.json.zip registry.json
          sha256sum registry.json registry.json.zip > checksums.txt
      - name: Publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITEE_KEY: ${{ secrets.GITEE_KEY }}
        run: |
          {
            echo "* clangd ${{ needs.tag.outputs.clangd }}"
            echo "* clangd_linux ${{ needs.tag.outputs.clangd_lin }} build with rpath lib"
            echo "* autohotkey2-lsp ${{ needs.tag.outputs.ahk }}"
          } | tee /tmp/note.md
          tag_name=${{ needs.tag.outputs.tag }}
          git push origin :refs/tags/$tag_name
          gh release delete $tag_name -y || true
          gh release create $tag_name -t $tag_name -F "/tmp/note.md" --target $GITHUB_SHA
          sleep 2
          gh release upload $tag_name --clobber registry.json.zip checksums.txt
